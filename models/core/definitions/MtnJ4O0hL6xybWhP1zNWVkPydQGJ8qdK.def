this.internal = gl.createVertexArray();
this.bind()
this.mode = gl.ARRAY_BUFFER;
this.vertexBuffer = gl.createBuffer();
gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

this.vertexCount = vertices.length;

this.indexCount = indices.length;
console.log(this.indexCount);
if(this.indexCount > 0)
{
    this.indexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);
    this.mode = gl.ELEMENT_ARRAY_BUFFER;
}

console.log("hello");
const type = gl.FLOAT; // the data in the buffer is 32bit floats
const normalize = false; // don't normalize
let stride = 0; // how many bytes to get from one set of values to the next
// 0 = use type and numComponents above
let offset = 0; // how many bytes inside the buffer to start from
//gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
let components = 0;
for(let i in attributes)
{
    stride += attributes[i] * 4;
    components += attributes[i];
}
gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
for(let i in attributes)
{
    gl.enableVertexAttribArray(i);
    gl.vertexAttribPointer(i, attributes[i], type, normalize, stride, offset);
    offset += attributes[i] * 4;
}
/*gl.enableVertexAttribArray(0);
gl.vertexAttribPointer(0, numComponents, type, normalize, stride, offset);
gl.enableVertexAttribArray(1);
gl.vertexAttribPointer(1, 3, type, normalize, stride, offset + 2 * 4);*/
gl.enableVertexAttribArray(0);